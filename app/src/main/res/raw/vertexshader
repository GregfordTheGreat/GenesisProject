uniform mat4 u_MVPMatrix; 			// A constant representing the combined model/view/projection matrix.
uniform mat4 u_MVMatrix;  			// A constant representing the combined model/view matrix.
uniform vec3 u_LightPos;		// The position of the light in eye space.
attribute vec4 a_Position; 			// Per-vertex position information we will pass in.
attribute vec4 a_Color; 			// Per-vertex color information we will pass in.
attribute vec3 a_Normal;			// Per-vertex normal information we will pass in.
attribute vec2 a_TexCoordinate;		// Per-vertex texture coordinate information we will pass in.
attribute float a_Shinyness;

// the shadow projection matrix
uniform mat4 uShadowProjMatrix;

varying vec3 v_Position;			// This will be passed into the fragment shader.
varying vec4 v_Color;				// This will be passed into the fragment shader.
varying vec3 v_Normal;				// This will be passed into the fragment shader.
varying vec2 v_TexCoordinate;		// This will be passed into the fragment shader.
varying vec3 v_LightPos;
varying vec4 vShadowCoord;
varying float v_Shinyness;
varying vec4 temp;


void main()							// The entry point for our vertex shader.
{
  temp = a_Position;
  //if(temp.y > 1.0) {
    //temp.y = 0.0;
  //}
  v_Position = vec3(u_MVMatrix * temp);	// Transform the vertex into eye space.
  v_Normal = normalize(vec3(u_MVMatrix * vec4(a_Normal, 0.0)));	// Transform the normal's orientation into eye space.
  v_Color = a_Color;
  v_TexCoordinate = a_TexCoordinate;
  v_LightPos = vec3(u_MVMatrix * vec4(u_LightPos, 1.0));
  v_Shinyness = a_Shinyness;
  vShadowCoord = uShadowProjMatrix * temp;

  gl_Position = u_MVPMatrix * temp;		// gl_Position is a special variable used to store the final position.Multiply the vertex by the matrix to get the final point in normalized screen coordinates.
} 
