uniform mat4 u_MVPMatrix; 			// A constant representing the combined model/view/projection matrix.
uniform mat4 u_MVMatrix;  			// A constant representing the combined model/view matrix.
attribute vec4 a_Position; 			// Per-vertex position information we will pass in.
attribute vec4 a_Color; 			// Per-vertex color information we will pass in.
attribute vec3 a_Normal;			// Per-vertex normal information we will pass in.
attribute vec2 a_TexCoordinate;		// Per-vertex texture coordinate information we will pass in.

varying vec4 v_Color;				// This will be passed into the fragment shader.
varying vec2 v_TexCoordinate;		// This will be passed into the fragment shader.
varying vec3 v_Normal;			// This will be passed into the fragment shader.


void main()							// The entry point for our vertex shader.
{
  v_Color = a_Color;
  v_Normal = normalize(vec3(u_MVMatrix * vec4(a_Normal, 0.0)));	// Transform the normal's orientation into eye space.
  v_TexCoordinate = a_TexCoordinate;
  gl_Position = u_MVPMatrix * a_Position;
}
